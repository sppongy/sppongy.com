version: "3.1"
services:
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: ${vaultwardenName}
    restart: ${restart}
    environment:
      - DOMAIN=${vaultwardenURL}
      - PUSH_ENABLED=true
      - PUSH_INSTALLATION_ID=/run/secrets/vaultID
      - PUSH_INSTALLATION_KEY=/run/secrets/vaultKey
    ports:
      - ${vaultwardenPort}
    volumes:
      - ${data}/vaultwarden:/data
  wireguard:
    image: linuxserver/wireguard:arm64v8-latest
    container_name: ${wireguardName}
    restart: ${restart}
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=${wireguardUrl}
      - SERVERPORT=${wireguardPort}
      - PEERS=1 
      - PEERDNS=auto 
      - LOG_CONFS=true
    volumes:
      - ${config}/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - ${wireguardPort}
      - ${wguiPort}
  wgui:
    image: ngoduykhanh/wireguard-ui:latest
    container_name: ${wguiName}
    depends_on:
      - wireguard
    restart: ${restart}
    cap_add:
      - NET_ADMIN
    network_mode: service:wireguard
    environment:
      - SENDGRID_API_KEY
      - EMAIL_FROM_ADDRESS
      - EMAIL_FROM_NAME
      - SESSION_SECRET
      - BIND_ADDRESS=${wguiAddress}
      - WGUI_USERNAME=admin
      - WGUI_PASSWORD=adminpass
      - WG_CONF_TEMPLATE
      - WGUI_MANAGE_START=true
      - WGUI_MANAGE_RESTART=true
    logging:
      driver: json-file
      options:
        max-size: 50m
    volumes:
      - ${data}/wgui:/app/db
      - ${config}/wgui:/etc/wireguard
  nginxpm:
    image: jc21/nginx-proxy-manager:latest
    container_name: ${nginxpmName}
    restart: ${restart}
    ports:
      - ${http}
      - ${https}
      - ${nginxpmPort}
    volumes:
      - ${data}/nginxpm:/data
      - ${data}/letsencrypt:/etc/letsencrypt
      - ${data}/www:/data/www
  qbittorrent:
    container_name: ${qbittorrentName}
    image: ${provider}/qbittorrent
    restart: ${restart}
    ports:
      - ${qbittorrentPort}
    environment:
      - PUID=${PUID}
      - PGID=${PUID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/qbittorrent:/config
      - ${data}/torrents:/data/torrents
  sabnzbd:
    container_name: ${sabnzbdName}
    restart: ${restart}
    image: ${provider}/sabnzbd
    ports:
      - ${sabnzbdPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/sabnzbd:/config
      - ${data}/usenet:/data/usenet
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: ${jellyseerrName}
    restart: ${restart}
    ports:
      - ${jellyseerrPort}
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=debug
    volumes:
      - ${config}/jellyseerr:/app/config
      - ${data}:/data
  prowlarr:
    container_name: ${prowlarrName}
    restart: ${restart}
    image: ${provider}/prowlarr
    ports:
      - ${prowlarrPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/prowlarr:/config
  bazarr:
    container_name: ${bazarrName}
    restart: ${restart}
    image: ${provider}/bazarr
    ports:
      - ${bazarrPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/bazarr:/config
      - ${media}:/data/media
  sonarr:
    container_name: ${sonarrName}
    restart: ${restart}
    image: ${provider}/sonarr
    ports:
      - ${sonarrPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/sonarr:/config
      - ${data}:/data
      - ${data}/usenet/:/data/usenet
  radarr:
    container_name: ${radarrName}
    restart: ${restart}
    image: ${provider}/radarr
    ports:
      - ${radarrPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    volumes:
      - ${config}/radarr:/config
      - ${data}:/data
  mylar3:
    container_name: ${mylarName}
    restart: ${restart}
    image: lscr.io/linuxserver/mylar3:latest
    ports:
      - ${mylarPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${config}/mylar3:/config
      - ${media}/books:/comics
  doplarr:
    container_name: doplarr
    restart: unless-stopped
    image: ${provider}/doplarr:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - SONARR__URL=http://sonarr:${sonarrPort}
      - RADARR__URL=http://radarr:${radarrPort}
      - SONARR__API=/run/secrets/sonarr
      - RADARR__API=/run/secrets/radarr
      - DISCORD__TOKEN=/run/secrets/doplarr
  jellyfin:
    container_name: ${jellyfinName}
    restart: ${restart}
    image: ${provider}/jellyfin
    ports:
      - ${jellyfinPort}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - device=/dev/video10:/dev/video10
      - device=/dev/video11:/dev/video11
      - device=/dev/video12:/dev/video12
    volumes:
      - ${config}/jellyfin:/config
      - ${media}:/data/media
  kavita:
    image: kizaing/kavita:latest
    container_name: ${kavitaName}
    restart: ${restart}
    ports:
      - ${kavitaPort}
    environment:
      - TZ=${TZ}
    volumes:
      - ${config}/kavita:/kavita/config
      - ${media}/books:/data/media/books 
  gitea:
    image: gitea/gitea:linux-arm64
    container_name: ${giteaName}
    restart: ${restart}
    environment: 
      - USER_UID=${PUID}
      - USER_GID=${PGID}
    volumes:
      - ${data}/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${giteaPort}
      - ${giteaAdmin}
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: ${homepageName}
    restart: ${restart}
    ports:
      - ${homepagePort}
    volumes:
      - ${config}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
  redbot:
    image: phasecorex/red-discordbot
    container_name: ${redbotName}
    restart: ${restart}
    volumes: 
      - ${data}/redbot:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - OWNER=${ownerID}
      - PREFIX=${prefix}
      - TOKEN=/run/secrets/redbot

secrets: 
  wguiPassword:
    file: ./secrets/wgui
  doplarrToken:
    file: ./secrets/doplarr
  redbotToken:
    file: ./secrets/redbot
  sonarrAPI:
    file: ./secrets/sonarr
  radarrAPI:
    file: ./secrets/radarr
  vaultID:
    file: ./secrets/vaultID
  vaultKey:
    file: ./secrets/vaultKey
